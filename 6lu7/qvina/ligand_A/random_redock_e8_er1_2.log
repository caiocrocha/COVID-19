############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... done.
Setting up the scoring function ... done.
Analyzing the binding site ... done.
Using random seed: -793495845
Performing search ... done.
Refining results ... done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.0      0.000      0.000
   2         -6.9      2.589      7.865
   3         -6.8      2.695      8.660
   4         -6.8      2.535      5.033
   5         -6.8      2.578      8.693
   6         -6.7      2.414      9.158
   7         -6.6      2.413      6.439
   8         -6.5      3.059      7.788
   9         -6.3      1.879      2.401
  10         -6.3      3.738      8.895
  11         -6.3      2.877      5.581
  12         -6.3      2.618      8.321
  13         -6.2      2.477      8.726
  14         -6.2      2.841      7.012
  15         -6.2      2.721      4.939
  16         -6.2      2.768      7.102
  17         -6.2      3.342      9.822
  18         -6.1      2.652      9.134
  19         -6.1      2.223      5.690
  20         -6.1      2.430      9.255
Writing output ... done.
