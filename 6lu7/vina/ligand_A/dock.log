############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... ############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... Analyzing the binding site ... done.
Setting up the scoring function ... done.
done.
Setting up the scoring function ... done.
done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
done.
Analyzing the binding site ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... Analyzing the binding site ... done.
Setting up the scoring function ... Analyzing the binding site ... Analyzing the binding site ... done.
Setting up the scoring function ... done.
done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
done.
Setting up the scoring function ... done.
Setting up the scoring function ... Analyzing the binding site ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
done.
done.
Setting up the scoring function ... Analyzing the binding site ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... Analyzing the binding site ... done.
Setting up the scoring function ... done.
Setting up the scoring function ... Analyzing the binding site ... done.
done.
done.
Setting up the scoring function ... done.
done.
done.
done.
done.
done.
Analyzing the binding site ... Analyzing the binding site ... done.
Analyzing the binding site ... Analyzing the binding site ... Analyzing the binding site ... Analyzing the binding site ... done.
Analyzing the binding site ... Analyzing the binding site ... done.
done.
done.
Analyzing the binding site ... done.
Analyzing the binding site ... done.
Analyzing the binding site ... done.
Analyzing the binding site ... done.
Analyzing the binding site ... done.
done.
Analyzing the binding site ... done.
Analyzing the binding site ... done.
Analyzing the binding site ... Analyzing the binding site ... Analyzing the binding site ... done.
done.
done.
Analyzing the binding site ... Analyzing the binding site ... done.
done.
Analyzing the binding site ... Analyzing the binding site ... Analyzing the binding site ... Analyzing the binding site ... done.
Analyzing the binding site ... Analyzing the binding site ... Analyzing the binding site ... done.
Using random seed: 1784551700
Performing search ... done.
Using random seed: -1384719328
Performing search ... done.
Using random seed: 199916186
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: -925780082
Performing search ... *done.
Using random seed: 1325612454
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: -2051476350
Performing search ... *done.
Using random seed: 658855432
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: 1117794678
Performing search ... *
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*done.
Using random seed: -466840836
Performing search ... done.
Using random seed: -7901590
Performing search ... done.
Using random seed: 2035673170
Performing search ... done.
Using random seed: 451037656
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: -1133597858
Performing search ... *done.
Using random seed: -674658612
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: 909976902
Performing search ... done.
Using random seed: -1592537104
Performing search ... *done.
Using random seed: -1800354880
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: -1341415634
Performing search ... done.
Using random seed: 1368916148
Performing search ... *
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: 1576733924
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*done.
Using random seed: -215719366
Performing search ... *
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: 702159126
Performing search ... done.
Using random seed: -882476388
Performing search ... *
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: 1827855394
Performing search ... done.
Using random seed: 243219880
Performing search ... *
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: -423537142
Performing search ... *
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|

0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: 1161098372
Performing search ... *done.
Using random seed: -1549233410
Performing search ... done.
Using random seed: 2078978768
Performing search ... done.
Using random seed: -2008172656
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
**done.
Using random seed: 35402104
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
done.
Using random seed: -631353013
Performing search ... *done.
Using random seed: 1620037618
Performing search ... done.
Using random seed: -1090292262
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*done.
Using random seed: 953282502
Performing search ... 
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|

0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*done.
Using random seed: 494343253
Performing search ... *
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|

0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
**
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|

0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|

0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
***
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
*
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|

0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|
**
0%   10   20   30   40   50   60   70   80   90   100%
|----|----|----|----|----|----|----|----|----|----|

done.
Refining results ... 
searching finished in 3248.439 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.0      0.000      0.000
   2         -6.7      2.901      7.961
   3         -6.7      2.679      8.575
   4         -6.7      2.967      7.379
   5         -6.2      2.487      6.975
   6         -6.2      4.064      8.187
   7         -6.2      3.288      8.380
   8         -6.2      4.113      8.566
   9         -6.1      3.649      8.857
  10         -6.1      2.988      6.280
  11         -6.1      2.124      6.178
  12         -6.0      2.633      6.529
  13         -6.0      3.578      6.754
  14         -6.0      4.893     10.250
  15         -6.0      3.572      8.342
  16         -6.0      4.275      8.214
  17         -5.9      3.561      9.089
  18         -5.9      2.475      6.493
  19         -5.9      3.612      8.291
  20         -5.8      4.004      9.027
Writing output ... done.
*********************
done.
Refining results ... 
searching finished in 3324.249 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.3      0.000      0.000
   2         -7.0      3.629      7.537
   3         -6.6      2.338      7.849
   4         -6.4      2.918      5.979
   5         -6.3      2.282      7.670
   6         -6.3      3.041      7.747
Writing output ... done.
*
done.
Refining results ... 
searching finished in 3331.186 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.6      0.000      0.000
   2         -6.6      3.535      7.854
   3         -6.5      2.808      7.735
   4         -6.5      2.346      4.878
   5         -6.4      2.245      7.695
   6         -6.4      2.609      5.136
   7         -6.3      2.628      6.243
   8         -6.3      2.587      6.148
   9         -6.2      2.440     10.068
  10         -6.1      2.549      4.649
  11         -6.1      2.588      9.188
  12         -6.0      2.789      9.248
  13         -5.9      3.892      6.499
  14         -5.9      2.447      5.202
  15         -5.9      2.233      5.836
  16         -5.8      2.247      7.689
  17         -5.8      2.850      8.582
  18         -5.8      3.000      8.427
  19         -5.8      2.595      6.051
  20         -5.7      2.822      9.023
Writing output ... done.
***
done.
Refining results ... 
searching finished in 3342.096 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.4      0.000      0.000
   2         -7.2      2.152      3.226
   3         -7.1      2.389      6.929
   4         -7.0      2.545      7.926
   5         -7.0      2.517      9.014
   6         -6.9      1.689      2.024
   7         -6.9      2.644      9.977
   8         -6.8      2.443      8.294
   9         -6.7      2.550      5.484
  10         -6.6      2.857      8.275
  11         -6.6      1.881      6.024
  12         -6.6      2.965      5.873
  13         -6.5      2.590      6.665
  14         -6.5      2.592      7.577
  15         -6.5      2.414      8.699
  16         -6.5      3.330     10.472
  17         -6.4      2.823      9.359
  18         -6.4      2.850      8.204
Writing output ... done.
**
done.
Refining results ... **
searching finished in 3348.030 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.6      0.000      0.000
   2         -6.5      1.969      3.339
   3         -6.5      2.508      9.775
   4         -6.3      3.413      8.452
   5         -6.1      2.746      9.178
   6         -6.0      2.374      6.679
   7         -6.0      2.190      6.515
   8         -6.0      2.024      3.600
   9         -5.8      2.529      5.983
  10         -5.8      2.622      6.516
  11         -5.8      2.442      9.762
  12         -5.8      3.109      7.706
  13         -5.8      2.621      3.610
  14         -5.7      2.899      7.322
  15         -5.7      2.799      9.911
  16         -5.6      3.138      9.615
  17         -5.6      2.293     10.374
  18         -5.6      2.372      5.683
  19         -5.6      2.896     10.620
Writing output ... *done.
*
done.
Refining results ... **
searching finished in 3354.219 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.3      0.000      0.000
   2         -6.8      2.415      6.022
   3         -6.5      2.556      8.462
   4         -6.5      2.512      6.366
   5         -6.4      1.716      3.063
   6         -6.4      1.907      3.515
Writing output ... done.
**
done.
Refining results ... **
done.
Refining results ... 
searching finished in 3375.436 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.1      0.000      0.000
   2         -6.6      2.936      8.159
   3         -6.5      3.616      6.347
   4         -6.4      2.359      4.051
   5         -6.4      2.379      6.630
   6         -6.3      2.588      6.670
   7         -6.3      2.500      7.620
   8         -6.2      2.596      6.255
   9         -6.1      2.092      3.443
  10         -6.1      2.384      4.043
  11         -6.1      2.511      6.443
  12         -6.1      2.349      5.923
  13         -6.1      2.391      6.767
  14         -6.0      2.453      3.950
  15         -6.0      2.497      5.211
  16         -6.0      2.813      4.473
  17         -5.9      2.457      6.694
  18         -5.9      2.451      6.459
  19         -5.9      2.718      8.491
  20         -5.8      2.104      6.384
Writing output ... done.

searching finished in 3379.414 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.0      0.000      0.000
   2         -6.8      3.323      7.907
   3         -6.7      2.441      6.439
   4         -6.4      3.155      6.785
   5         -6.4      2.693      4.769
   6         -6.3      2.434      5.848
   7         -6.2      2.648      5.328
   8         -6.2      2.267      6.315
   9         -6.1      2.458      5.570
  10         -6.1      3.036      9.041
  11         -6.0      1.966      2.528
  12         -5.9      2.905      8.031
  13         -5.9      2.657      4.993
  14         -5.8      2.711      7.850
  15         -5.8      3.174      5.847
  16         -5.8      3.529      7.005
  17         -5.8      2.583      6.249
  18         -5.8      3.138      7.023
  19         -5.8      3.348      7.215
  20         -5.8      2.805      8.468
Writing output ... done.
*
done.
Refining results ... *
searching finished in 3400.878 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.1      0.000      0.000
   2         -6.9      2.245      6.433
   3         -6.9      2.361      6.340
   4         -6.8      3.532      8.389
   5         -6.8      3.609      8.243
   6         -6.7      3.023      7.153
   7         -6.6      3.630      8.180
   8         -6.5      3.136      7.990
   9         -6.2      3.752      8.396
  10         -6.1      2.563      7.172
  11         -6.1      4.032      8.459
  12         -6.1      4.037      7.923
Writing output ... *
done.
Refining results ... done.

searching finished in 3405.381 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.9      0.000      0.000
   2         -6.8      2.552      6.244
   3         -6.7      2.916      9.928
   4         -6.7      2.576      7.233
   5         -6.7      2.376      7.101
   6         -6.7      2.623      8.451
   7         -6.5      2.438      9.269
   8         -6.5      3.917      8.169
   9         -6.4      2.266      3.450
  10         -6.4      2.690      7.351
  11         -6.4      2.963      9.884
  12         -6.4      2.264      5.585
  13         -6.3      2.419      5.907
  14         -6.3      2.718      9.144
  15         -6.3      2.603      6.792
  16         -6.2      2.519      9.770
  17         -6.1      2.670      8.973
  18         -6.0      2.622      7.916
  19         -6.0      2.302      7.278
  20         -6.0      3.079      7.769
Writing output ... done.
**
done.
Refining results ... **
done.
Refining results ... 
searching finished in 3413.110 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.3      0.000      0.000
   2         -6.9      3.233      6.741
   3         -6.9      3.080      9.353
   4         -6.8      2.704      6.277
   5         -6.8      2.542      9.869
   6         -6.8      2.614      8.977
   7         -6.6      2.598      6.849
   8         -6.6      2.711      7.184
   9         -6.5      2.592      8.809
  10         -6.5      2.567      6.679
  11         -6.4      2.284      5.902
  12         -6.4      2.853      9.164
  13         -6.4      3.032      5.502
  14         -6.4      1.505      2.174
  15         -6.4      3.225     10.050
  16         -6.4      2.200      4.370
  17         -6.3      2.723     10.252
  18         -6.3      2.579      6.714
  19         -6.3      2.435      9.047
  20         -6.2      2.693      9.648
Writing output ... done.
*
searching finished in 3417.029 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.9      0.000      0.000
   2         -6.8      3.594      8.442
   3         -6.6      3.781      7.825
   4         -6.5      2.261      5.915
   5         -6.5      2.457      6.936
   6         -6.4      2.696      6.683
   7         -6.4      2.157      9.131
   8         -6.2      3.759      8.837
   9         -6.2      2.283      7.838
  10         -6.2      2.652      6.362
  11         -6.1      2.740      7.730
  12         -6.1      2.478      6.645
  13         -6.1      2.680      5.315
  14         -6.1      2.997      7.839
  15         -6.1      2.839      6.759
Writing output ... done.

done.
Refining results ... 
searching finished in 7761.872 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.8      0.000      0.000
   2         -6.7      1.821      6.010
   3         -6.5      1.956      7.022
   4         -6.4      1.759      2.373
   5         -6.4      1.730      2.588
   6         -6.3      3.181      6.935
   7         -6.2      3.651      9.482
   8         -6.2      3.248      8.358
   9         -6.2      2.746      6.498
  10         -6.1      3.050      7.201
  11         -6.1      2.268      8.075
  12         -6.0      2.930      8.102
  13         -6.0      2.581      6.667
  14         -6.0      2.689      7.324
  15         -6.0      2.323      7.656
  16         -5.9      2.135      6.786
  17         -5.9      3.472      9.030
  18         -5.9      3.926      8.429
  19         -5.8      2.176      8.108
  20         -5.8      2.012      7.342
Writing output ... done.
*************
done.
Refining results ... **
done.
Refining results ... 
searching finished in 7842.764 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.9      0.000      0.000
   2         -6.9      2.114      2.944
   3         -6.8      3.009      6.453
   4         -6.6      2.940      7.800
   5         -6.6      2.984      8.557
   6         -6.5      3.025      8.411
   7         -6.5      3.395      5.760
   8         -6.5      3.764      7.447
   9         -6.4      1.951      5.514
  10         -6.4      2.693      6.909
  11         -6.4      3.959      7.689
  12         -6.4      2.640      9.112
  13         -6.3      2.259      5.746
  14         -6.3      3.121      6.187
  15         -6.3      3.085      8.307
  16         -6.3      2.921      9.657
  17         -6.3      4.174      9.971
  18         -6.3      2.737      7.985
  19         -6.2      2.753      8.410
  20         -6.2      2.607      9.096
Writing output ... done.
*
searching finished in 7844.416 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.3      0.000      0.000
   2         -6.9      3.371      6.663
   3         -6.9      1.655      2.516
   4         -6.8      2.914      7.749
   5         -6.8      2.121      5.725
   6         -6.7      2.950      9.259
   7         -6.5      2.033      7.710
   8         -6.5      3.169      7.620
   9         -6.4      3.257      7.405
  10         -6.3      3.087      8.492
  11         -6.3      3.162      7.747
  12         -6.3      3.533      8.530
  13         -6.3      3.288      7.420
  14         -6.2      2.535      7.466
  15         -6.2      2.594      7.982
  16         -6.2      2.648      5.398
  17         -6.2      1.961      7.489
  18         -6.2      3.318      9.649
  19         -6.2      2.711      7.559
  20         -6.0      3.371      9.257
Writing output ... done.
**
done.
Refining results ... 
searching finished in 7859.965 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.2      0.000      0.000
   2         -7.2      2.940      5.339
   3         -7.0      2.148      5.876
   4         -6.8      2.521      6.685
   5         -6.8      2.944      7.754
   6         -6.8      3.207      9.215
   7         -6.7      2.963      7.764
   8         -6.7      4.079     10.207
   9         -6.5      3.417      7.647
  10         -6.5      2.894      7.818
  11         -6.5      2.034      4.489
  12         -6.5      2.557      5.812
  13         -6.4      3.259      7.978
  14         -6.4      3.185      8.413
  15         -6.4      3.669      9.537
  16         -6.4      3.358      7.499
  17         -6.4      3.528      9.751
  18         -6.3      2.366      6.217
  19         -6.3      2.726      7.884
  20         -6.2      3.683      9.141
Writing output ... done.
***
done.
Refining results ... 
searching finished in 7884.137 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.4      0.000      0.000
   2         -7.2      2.897      7.294
   3         -7.0      2.250      9.195
   4         -6.9      3.667      9.689
   5         -6.9      3.755      9.631
   6         -6.9      3.212      8.753
   7         -6.9      3.487      6.617
   8         -6.8      4.443     10.452
   9         -6.8      2.516      6.131
  10         -6.7      3.911      9.910
  11         -6.7      4.405     10.178
  12         -6.7      3.413      9.460
  13         -6.7      3.716      6.589
  14         -6.7      3.300      8.672
  15         -6.7      3.296      6.476
  16         -6.7      3.481      8.826
  17         -6.6      3.896      9.714
  18         -6.6      2.234      5.540
  19         -6.5      2.637      6.792
  20         -6.5      3.606      9.374
Writing output ... done.
**
done.
Refining results ... *
searching finished in 7906.147 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.7      0.000      0.000
   2         -7.4      2.805      7.369
   3         -7.3      2.721      9.487
   4         -7.3      2.632      6.951
   5         -7.3      2.922      8.981
   6         -7.3      2.742      7.831
   7         -7.2      2.770      9.872
   8         -7.2      2.740      9.544
   9         -7.2      2.845     10.011
  10         -7.0      3.639      9.576
  11         -7.0      2.766      6.600
  12         -7.0      2.239      5.152
  13         -7.0      2.258      9.029
  14         -7.0      2.834      5.376
  15         -7.0      2.453      5.867
  16         -7.0      2.465      9.064
  17         -6.9      2.886      6.643
  18         -6.9      2.904      7.308
  19         -6.8      2.528      5.890
  20         -6.8      2.479      6.688
Writing output ... done.
*****
done.
Refining results ... 
searching finished in 7925.202 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.3      0.000      0.000
   2         -7.2      1.614      2.113
   3         -7.2      3.458      9.158
   4         -7.1      2.046      8.637
   5         -7.0      2.200      7.814
   6         -6.9      2.393      6.136
   7         -6.8      2.218      6.932
   8         -6.7      3.046      7.440
   9         -6.6      3.752      9.363
  10         -6.5      2.893      6.992
  11         -6.4      4.127      8.634
  12         -6.4      3.585      9.187
  13         -6.4      4.314      9.041
  14         -6.4      3.403      7.953
  15         -6.3      2.587      7.911
  16         -6.3      3.515      9.710
  17         -6.3      1.701      4.553
  18         -6.3      3.650      7.841
  19         -6.3      3.066      7.318
  20         -6.3      3.244      7.369
Writing output ... done.
**
done.
Refining results ... 
searching finished in 7936.114 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.6      0.000      0.000
   2         -7.6      2.422      7.362
   3         -7.5      3.182      7.276
   4         -7.4      2.999      8.344
   5         -7.4      2.286      6.740
   6         -7.3      2.542      6.104
   7         -7.3      3.515      7.331
   8         -7.2      2.360      6.542
   9         -7.2      2.559      8.419
  10         -7.2      3.547      8.427
  11         -7.2      1.811      2.514
  12         -7.2      2.924      8.437
  13         -7.1      3.150      8.605
  14         -7.1      2.675      6.403
  15         -7.1      2.650      6.394
  16         -7.0      2.563      8.001
  17         -7.0      2.865      6.254
  18         -7.0      2.582      8.320
  19         -7.0      2.204      6.864
  20         -6.9      2.973      5.769
Writing output ... done.
**
done.
Refining results ... 
searching finished in 7940.394 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.9      0.000      0.000
   2         -7.6      3.025      4.821
   3         -7.5      3.255      9.743
   4         -7.5      2.457      9.424
   5         -7.2      2.199      2.591
   6         -7.2      2.811      8.801
   7         -7.1      3.060     10.016
   8         -7.0      2.786      9.250
   9         -7.0      2.401      5.529
  10         -7.0      3.294      5.113
  11         -7.0      2.882      6.106
  12         -7.0      2.662      9.338
  13         -7.0      2.474      6.961
  14         -6.9      3.166      7.598
  15         -6.9      2.793      9.359
Writing output ... done.
**
done.
Refining results ... 
searching finished in 7955.226 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.8      0.000      0.000
   2         -6.6      2.282      5.816
   3         -6.5      2.251      6.852
   4         -6.4      3.110      7.226
   5         -6.4      2.551      5.974
   6         -6.3      2.143      5.480
   7         -6.2      2.670      6.774
   8         -6.2      2.172      7.942
   9         -6.0      2.428      6.179
  10         -6.0      2.936      7.711
  11         -6.0      2.125      6.502
  12         -6.0      2.403      8.024
  13         -6.0      2.277      6.036
  14         -6.0      2.416      8.251
  15         -5.9      2.060      6.360
  16         -5.9      2.362      7.382
  17         -5.8      2.446      8.414
  18         -5.8      2.578      6.979
  19         -5.8      2.833      6.922
  20         -5.7      2.630      7.513
Writing output ... done.
***
done.
Refining results ... 
searching finished in 7971.333 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.8      0.000      0.000
   2         -6.6      3.685      7.438
   3         -6.6      3.582      7.501
   4         -6.5      3.183      6.430
   5         -6.4      2.999      5.261
   6         -6.3      3.953      7.027
   7         -6.3      2.032      5.524
   8         -6.3      2.601      9.962
   9         -6.3      3.111      9.024
  10         -6.3      2.644      7.154
  11         -6.3      3.579      6.611
  12         -6.2      3.000      8.230
  13         -6.2      2.359      9.550
  14         -6.2      2.826      6.802
  15         -6.2      2.798      5.042
  16         -6.2      3.063      7.444
  17         -6.2      1.796      2.164
  18         -6.2      3.049      9.704
  19         -6.1      2.304      5.219
  20         -6.0      3.921      8.816
Writing output ... done.
***
done.
Refining results ... 
searching finished in 7992.905 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.1      0.000      0.000
   2         -6.8      3.480      8.724
   3         -6.8      3.455      8.155
   4         -6.7      3.409      6.524
   5         -6.7      3.359      7.651
   6         -6.7      3.107      7.970
   7         -6.6      2.335      7.627
   8         -6.5      2.869      7.692
   9         -6.5      3.155      7.429
  10         -6.4      3.378      7.988
  11         -6.4      2.942      7.109
  12         -6.3      2.731      5.191
  13         -6.3      2.414      7.194
  14         -6.3      2.325      7.065
  15         -6.3      2.857      7.477
  16         -6.2      3.872      6.807
  17         -6.2      3.382      8.146
  18         -6.2      2.773      8.003
  19         -6.1      2.461      7.598
  20         -6.1      2.327      8.238
Writing output ... done.
***************************************************************************************************************************************
done.
Refining results ... 
searching finished in 8989.702 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.5      0.000      0.000
   2         -7.4      4.124     10.789
   3         -7.4      3.067      8.410
   4         -7.3      3.812     10.912
   5         -7.3      2.750      4.256
   6         -7.3      2.802      9.968
   7         -7.2      3.185      9.507
   8         -7.1      3.111      7.380
   9         -7.1      3.997      6.051
  10         -7.0      2.799     10.533
  11         -7.0      3.474      8.694
  12         -7.0      2.308      4.860
  13         -7.0      3.790      8.649
  14         -7.0      4.265      8.207
  15         -7.0      2.713      4.191
  16         -6.9      3.375     10.524
  17         -6.9      2.784      4.633
  18         -6.9      3.202      8.780
  19         -6.9      3.047     10.269
  20         -6.9      2.274      3.795
Writing output ... done.
*
done.
Refining results ... 
searching finished in 8995.643 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.4      0.000      0.000
   2         -7.4      2.255      5.544
   3         -7.3      2.384      5.724
   4         -7.1      2.324      6.901
   5         -7.1      2.207      3.359
   6         -7.0      3.626      9.834
   7         -7.0      2.581      8.807
   8         -6.9      3.615      9.661
   9         -6.8      2.814      9.161
  10         -6.8      2.846      6.538
  11         -6.8      2.739      8.984
  12         -6.8      3.961      9.841
  13         -6.8      2.975      5.901
  14         -6.8      3.377      9.288
  15         -6.7      4.034     10.144
  16         -6.6      3.123      7.548
  17         -6.6      2.557      8.327
  18         -6.6      3.677      5.795
  19         -6.6      2.774      5.650
  20         -6.6      3.298      9.215
Writing output ... done.
*
done.
Refining results ... 
searching finished in 8998.121 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.6      0.000      0.000
   2         -7.2      2.456      3.495
   3         -7.2      2.503      9.263
   4         -7.2      3.248      7.545
   5         -7.2      2.293      3.857
   6         -7.1      2.424      7.002
   7         -7.1      2.415      5.916
   8         -7.1      2.908      9.287
   9         -7.0      1.909      5.772
  10         -6.9      2.543      7.479
  11         -6.9      3.230      6.187
  12         -6.9      2.572      4.406
  13         -6.9      2.734      7.273
  14         -6.9      3.522     10.558
  15         -6.8      3.345     10.422
  16         -6.8      2.388      4.120
  17         -6.8      2.622      5.142
  18         -6.8      2.389      9.948
  19         -6.8      2.859      8.335
  20         -6.8      2.408      4.913
Writing output ... done.
*
done.
Refining results ... 
searching finished in 9005.843 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.9      0.000      0.000
   2         -6.5      2.627      5.919
   3         -6.4      1.701      2.498
   4         -6.3      2.282      8.038
   5         -6.3      3.980      9.660
   6         -6.2      2.921      7.080
   7         -6.2      2.798      6.985
   8         -6.2      3.801      9.582
   9         -6.0      2.559      7.696
  10         -5.9      3.501      9.138
  11         -5.9      3.333      9.217
  12         -5.9      2.938      7.528
  13         -5.8      3.970      7.724
  14         -5.8      3.283      8.185
  15         -5.8      3.628      8.047
  16         -5.8      2.291      7.750
  17         -5.7      3.546      7.623
  18         -5.7      2.764      8.248
  19         -5.7      2.943      7.456
  20         -5.7      2.188      7.518
Writing output ... done.
*
done.
Refining results ... 
searching finished in 9010.468 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.2      0.000      0.000
   2         -6.8      2.767      4.841
   3         -6.6      3.324      8.384
   4         -6.5      1.800      7.553
   5         -6.4      3.858      8.882
   6         -6.4      2.864      6.810
   7         -6.4      2.394      7.893
   8         -6.4      3.168      6.927
   9         -6.3      3.096      7.749
  10         -6.3      3.189      7.866
  11         -6.2      2.112      7.278
  12         -6.2      2.345      5.913
  13         -6.2      3.473      6.751
Writing output ... done.
*
done.
Refining results ... 
searching finished in 9012.851 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.2      0.000      0.000
   2         -7.2      3.560      6.985
   3         -6.7      2.839      6.763
   4         -6.7      2.491      5.204
   5         -6.6      2.888      8.830
   6         -6.6      3.021      8.987
   7         -6.5      2.459      4.742
   8         -6.5      2.758      6.272
   9         -6.5      1.829      2.824
  10         -6.4      2.282      5.089
  11         -6.4      2.411      9.303
  12         -6.4      2.917      5.058
  13         -6.4      2.240      5.728
  14         -6.4      3.377      9.085
  15         -6.3      2.590      7.964
  16         -6.3      2.455      6.380
  17         -6.3      2.795      4.943
  18         -6.3      2.031      5.076
Writing output ... done.
*
done.
Refining results ... *
done.
Refining results ... 
searching finished in 9015.849 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.2      0.000      0.000
   2         -6.8      2.524      8.135
   3         -6.6      2.588      6.990
   4         -6.6      2.864      9.119
   5         -6.6      2.927      7.856
   6         -6.6      2.908      7.849
   7         -6.5      4.062     10.159
   8         -6.5      2.907      6.946
   9         -6.4      2.314      7.779
  10         -6.4      2.637      5.056
  11         -6.4      2.959      6.127
  12         -6.3      2.067      7.639
  13         -6.3      3.430      9.194
  14         -6.3      1.912      5.299
  15         -6.3      3.174      7.228
  16         -6.2      1.748      2.624
  17         -6.2      2.713      7.388
  18         -6.2      3.142      6.921
  19         -6.2      2.522      7.309
  20         -6.1      2.442      5.207
Writing output ... done.

searching finished in 9016.538 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.9      0.000      0.000
   2         -6.7      2.846      8.901
   3         -6.6      2.037      5.877
   4         -6.5      2.910      7.795
   5         -6.5      2.526      6.573
   6         -6.5      2.698      7.416
   7         -6.4      2.385      7.844
   8         -6.3      2.810      7.358
   9         -6.3      2.990      7.961
  10         -6.2      1.835      4.348
  11         -6.2      2.831      6.595
  12         -6.1      3.912     10.172
  13         -6.1      2.864      7.914
  14         -6.1      2.509      8.152
  15         -6.1      1.623      6.987
  16         -6.1      2.214      7.879
  17         -6.1      2.713      6.671
  18         -6.0      2.964      7.718
  19         -6.0      4.512     10.014
  20         -6.0      3.135      7.193
Writing output ... done.
*
done.
Refining results ... 
searching finished in 9019.836 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.9      0.000      0.000
   2         -6.6      2.192      5.772
   3         -6.5      2.890      7.874
   4         -6.5      2.759      9.089
   5         -6.4      2.415      7.649
   6         -6.4      3.125      7.766
   7         -6.3      2.410      8.060
   8         -6.2      2.171      7.704
   9         -6.2      1.492      2.012
  10         -6.1      3.202      7.868
  11         -6.1      1.509      4.766
  12         -6.0      2.483      7.386
  13         -6.0      2.096      8.165
  14         -6.0      3.011      8.030
  15         -6.0      4.317      9.930
  16         -6.0      2.756      6.882
  17         -6.0      2.252      5.238
  18         -6.0      3.440      7.376
  19         -5.9      2.793      7.151
  20         -5.9      2.990      8.909
Writing output ... done.
*
done.
Refining results ... 
searching finished in 9024.763 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.6      0.000      0.000
   2         -7.6      2.931      5.836
   3         -7.4      3.052      7.786
   4         -7.4      3.912     10.184
   5         -7.3      2.183      5.752
   6         -7.3      3.477      7.198
   7         -7.2      3.724     10.455
   8         -7.2      3.753      7.815
   9         -7.1      3.217     11.325
  10         -7.1      3.284      9.315
  11         -7.1      3.771      7.094
  12         -7.1      3.435      6.924
  13         -7.1      3.005      6.887
  14         -7.0      3.229      8.619
  15         -7.0      4.264     11.242
  16         -7.0      3.765      9.813
  17         -7.0      3.149      6.227
  18         -7.0      2.902      5.718
  19         -7.0      2.797      7.047
  20         -6.9      2.734     10.601
Writing output ... done.
*
done.
Refining results ... 
searching finished in 9024.926 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -7.2      0.000      0.000
   2         -6.9      3.825      8.321
   3         -6.8      2.517      4.280
   4         -6.8      2.615      7.882
   5         -6.8      3.032      6.959
   6         -6.7      2.379      6.733
   7         -6.7      2.534      6.228
   8         -6.7      2.478     10.280
   9         -6.7      2.689      7.690
  10         -6.6      2.739     10.361
  11         -6.5      2.152      8.039
  12         -6.5      2.159      9.173
  13         -6.5      2.924      6.964
  14         -6.5      3.443      7.170
  15         -6.5      3.776      8.682
  16         -6.4      3.202      6.567
  17         -6.4      2.930      7.585
  18         -6.4      2.218      6.107
  19         -6.4      2.864      7.388
  20         -6.4      2.280      6.794
Writing output ... done.
*
done.
Refining results ... 
searching finished in 9026.590 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -6.9      0.000      0.000
   2         -6.6      2.898      9.209
   3         -6.6      2.006      5.676
   4         -6.5      2.513      7.834
   5         -6.4      3.184      7.396
   6         -6.4      2.976      8.320
   7         -6.3      2.721      7.880
   8         -6.3      2.705      6.526
   9         -6.2      3.599      8.666
  10         -6.2      3.116      6.373
  11         -6.2      3.941     10.473
  12         -6.2      2.518      8.184
  13         -6.2      3.216      9.761
  14         -6.2      3.040      8.182
  15         -6.2      2.300      6.853
  16         -6.1      2.582      6.411
  17         -6.1      3.433      9.653
  18         -6.1      2.821      7.108
  19         -6.1      2.962      6.910
  20         -6.0      3.109      7.468
Writing output ... done.
